  Ref Hook

  UseRefExample1 (without state):
  
    - used to create a reference to a DOM element in a functional component
    - it doesn't have to be a specific DOM element
    - if I don't want to connect a formData to a specific state, then useRef would be useful
    - 'inputRef.current' is the acutal DOM element
    - 'inputRef.current.value' is the acutal value
    - I am also be able to set that value, and change the style also
    - And if I change a reference value it does not rerender the component as if I were to set a state value
    - We could create a reference not just to an input, but to a paragraph or anything

  PrevState (get previous state):
    - if we update any state the component will update

  MemoryLeak.jsx + Todo.jsx
    - for this to make it happen, we need a component in which we can make a fetch request and unmount before we get the response back
    - the memory leak happens when we refresh the page, then toggle off the Todo while the setTimeout() fetching the data 
    - this happens in the firebase project and Brad handle it the same way
    - create a reference pertaining to the component being mounted
    - if I want something to happen when the component is unmounted I return it from the useEffect()
    - the difference between useRef and a normal variable is, that a normal variable doesnt change with rerendering

  Memoization
    - optimizations technique which speeds up performance when an 'expensive function' call happens
    - expensive: 1000 of data, video processing
    - if a number is calling an expensive function, I should consider to memoize it, because in that way only when the number changes will the expensive function run, not everytime

  useCallback
    - useMemo returns a memoize value, useCallback returns a memoize callback function when the dependencies change
    - just use a component as we have been
    - react.memo is a high order component, which takes a component as a prop and prevents the rerendering if the value in it haven't changed
    - essentially we can memoize a whole react component
    - now I can memoize the button component and use 'useCallback' on the addTask() function, and add the dependencie array with the 'setTasks' function
    - now the button component will be rendered once and the addTask() function will work nonentheless
    - onyl use it when dealing with performance issues

  Custom hooks
    - useFetch, useLocalstorage
    - always have to start with use..
    - useFetch: we going to have state for loading, error, data

    - useLocalstorage hook will set everything from the component level state to the localStorage
    - If I want to be store json in localStorage I have to use JSON.parse() to parse it back to json
    - when using useState() the second variable 'setFirst' [first, setFirst] can be either a variable or a function
  
